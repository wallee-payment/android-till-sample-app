plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.compose' version "2.0.0"
}


android {
    compileSdkVersion 35

    defaultConfig {
        applicationId 'com.wallee.android.till.sample.till'
        minSdkVersion 21
        targetSdkVersion 35
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
	
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures{
        viewBinding true
        compose = true
    }

    composeOptions {
        kotlinCompilerExtensionVersion "2.0.21"
    }
    namespace 'com.wallee.android.till.sample.till'
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.core:core:1.6.0'
    implementation 'androidx.activity:activity:1.8.0'

    if (getCurrentGitBranch().equalsIgnoreCase("master")) {
        implementation 'com.wallee.android.till:sdk:0.9.17'
    } else {
        implementation 'com.wallee.android.till:sdk:0.9.23'
    }

    def composeBom = platform('androidx.compose:compose-bom:2024.09.03')
    implementation composeBom
    androidTestImplementation composeBom

    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.material:material'
    implementation 'androidx.compose.foundation:foundation'
    implementation 'androidx.compose.ui:ui'
    implementation "androidx.activity:activity-compose:1.9.3"
}

def getCurrentGitBranch() {
    def gitBranch = "Unknown branch"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
    }
    return gitBranch
}